services:
  snippet-runner:
    container_name: "snippet-runner"
    image: ghcr.io/ingsis-group-12/snippet-searcher-runner:${IMAGE_TAG}
    restart: always
    ports:
      - "8080:8080"
    environment:
      NEW_RELIC_AGENT_ENABLED: ${NEW_RELIC_AGENT_ENABLED}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      NEW_RELIC_APP_NAME: snippet-runner
    profiles: ["full-setup", "frontend-development"]

  snippet-operations:
    container_name: "snippet-operations"
    image: ghcr.io/ingsis-group-12/snippet-operations:${IMAGE_TAG}
    restart: always
    ports:
      - "8081:8081"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_OPERATIONS_HOST: ${POSTGRES_OPERATIONS_HOST}
      POSTGRES_OPERATIONS_PORT: ${POSTGRES_OPERATIONS_PORT}
      BUCKET_URL: ${BUCKET_URL}
      PERMISSIONS_URL: ${PERMISSIONS_URL}
      RUNNER_URL: ${RUNNER_URL}
      NEW_RELIC_AGENT_ENABLED: ${NEW_RELIC_AGENT_ENABLED}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      NEW_RELIC_APP_NAME: snippet-operations
      REDIS_HOST: ${REDIS_HOST}
    depends_on:
      - asset-service
      - postgres-operations
    profiles: ["full-setup", "frontend-development"]

  snippet-permissions:
    container_name: "snippet-permissions"
    image: ghcr.io/ingsis-group-12/snippet-permissions:${IMAGE_TAG}
    restart: always
    ports:
      - "8083:8083"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PERMISSIONS_HOST: ${POSTGRES_PERMISSIONS_HOST}
      POSTGRES_PERMISSIONS_PORT: ${POSTGRES_PERMISSIONS_PORT}
      NEW_RELIC_AGENT_ENABLED: ${NEW_RELIC_AGENT_ENABLED}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      NEW_RELIC_APP_NAME: snippet-permissions
    depends_on:
      - postgres-permissions
    profiles: ["full-setup", "frontend-development"]

  printscript-ui:
    container_name: "printscript-ui"
    image: ghcr.io/ingsis-group-12/printscript-ui:${IMAGE_TAG}
    restart: always
    ports:
      - "5173:5173"
    volumes:
      - dist-volume:/app/dist
    profiles: ["full-setup"]

  reverse-proxy:
    container_name: "reverse-proxy"
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf/:/etc/nginx/conf.d/
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
      - ./nginx/images/:/usr/share/nginx/images/:ro
      - dist-volume:/usr/share/nginx/dist
      - ./init_nginx.sh:/init_nginx.sh
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
    entrypoint: ["/bin/bash", "/init_nginx.sh"]
    profiles: ["full-setup", "nginx"]

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    profiles: ["certbot"]

  asset-service:
    container_name: "asset-service"
    image: ghcr.io/austral-ingsis/snippet-asset-service:latest
    restart: always
    ports:
      - "8082:8080"
    environment:
      AZURE_HOST: "http://azurite"
      NEW_RELIC_AGENT_ENABLED: ${NEW_RELIC_AGENT_ENABLED}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      NEW_RELIC_APP_NAME: snippet-asset-service
    profiles: ["full-setup", "frontend-development"]

  azurite:
    container_name: "azurite"
    image: mcr.microsoft.com/azure-storage/azurite
    hostname: azurite
    restart: always
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    volumes:
      - blob:/workspace
    profiles: ["full-setup", "frontend-development"]

  postgres-operations:
    container_name: "postgres-operations"
    image: postgres:alpine
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres-operations-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    profiles: ["full-setup", "frontend-development"]

  postgres-permissions:
    container_name: "postgres-permissions"
    image: postgres:alpine
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - postgres-permissions-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    profiles: ["full-setup", "frontend-development"]

  redis:
      container_name: "redis"
      image: redis:6-alpine
      ports:
        - "6379:6379"

volumes:
  postgres-operations-data:
  postgres-permissions-data:
  blob:
    external: false
  dist-volume:
